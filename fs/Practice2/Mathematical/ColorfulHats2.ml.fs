let p = 1_000_000_007L

let power : int64 -> int64 -> int64 =
  ([| fun _ _ -> 0L |])
  |> fun fnc ->
    (
      fun m n ->
        match n with
        | _ when n = 0L -> 1L
        | _ when n % 2L = 0L -> fnc.[0] m (n / 2L) |> (fun x -> x * x % p)
        | _ -> m * fnc.[0] m (n - 1L) % p
    )
    |> fun fn -> (fnc.[0] <- fn) |> fun () -> fn

let count =
  fun (line: string) ->
    line.Split()
    |> Array.map int64
    |> Array.fold (fun (a, b, c) x ->
      match () with
      | _ when x = c -> (a, b, c + 1L)
      | _ when x = b -> (a, b + 1L, c)
      | _ when x = a -> (a + 1L, b, c)
      | _ -> raise (new System.Exception("unexpected order"))
    ) (0L, 0L, 0L)

let solve =
  fun (a, b, c) ->
    (a, b - a, c - b)
  |> fun (a, b, c) ->
    match () with
    | _ when a > 0L && b > 0L ->
      (* (+, +, ?) *)
      (power 6L a) * 3L * (power 2L b) * (if c = 0L then 1L else 2L) % p
    | _ when a > 0L ->
      (* (+, -, ?) *)
      (power 6L a) * (if c = 0L then 1L else 3L) % p
    | _ when b > 0L ->
      (* (-, +, ?) *)
      3L * (power 2L b) * (if c = 0L then 1L else 2L) % p
    | _ ->
      (* (-, -, +) *)
      3L

let data =
  [
    "0"
    "0 0"
    "0 0 1"
    "0 0 1 1"
    "0 0 1 1 2"
    "0 0 1 1 2 2"
    "0 0 1 1 2 2 3"
    "0 0 1 1 2 2 3 3"
    "0 0 0"
    "0 0 0 1"
    "0 0 0 1 1"
    "0 0 0 1 1 2"
    "0 0 0 1 1 2 2"
    "0 0 0 1 1 2 2 3"
    "0 0 0 1 1 1"
    "0 0 0 1 1 1 2"
    "0 0 0 1 1 1 2 2"
    "0 0 0 1 1 1 2 2 3"
    "0 0 0 1 1 1 2 2 3 3"
    "0 0 0 1 1 1 2 2 2"
    "0 0 0 1 1 1 2 2 2 3"
  ]

data |> List.map (count >> solve) |> printfn "%6A" ;;

// 0                   : (0, 0, 1) : (0, 0, 1) :   3
// 0 0                 : (0, 1, 1) : (0, 1, 0) :   6
// 0 0 1               : (0, 1, 2) : (0, 1, 1) :  12
// 0 0 1 1             : (0, 2, 2) : (0, 2, 0) :  12
// 0 0 1 1 2           : (0, 2, 3) : (0, 2, 1) :  24
// 0 0 1 1 2 2         : (0, 3, 3) : (0, 3, 0) :  24
// 0 0 1 1 2 2 3       : (0, 3, 4) : (0, 3, 1) :  48
// 0 0 1 1 2 2 3 3     : (0, 4, 4) : (0, 4, 0) :  48
// 0 0 0               : (1, 1, 1) : (1, 0, 0) :   6
// 0 0 0 1             : (1, 1, 2) : (1, 0, 1) :  18
// 0 0 0 1 1           : (1, 2, 2) : (1, 1, 0) :  36
// 0 0 0 1 1 2         : (1, 2, 3) : (1, 1, 1) :  72
// 0 0 0 1 1 2 2       : (1, 3, 3) : (1, 2, 0) :  72
// 0 0 0 1 1 2 2 3     : (1, 3, 4) : (1, 2, 1) : 144
// 0 0 0 1 1 1         : (2, 2, 2) : (2, 0, 0) :  36
// 0 0 0 1 1 1 2       : (2, 2, 3) : (2, 0, 1) : 108
// 0 0 0 1 1 1 2 2     : (2, 3, 3) : (2, 1, 0) : 216
// 0 0 0 1 1 1 2 2 3   : (2, 3, 4) : (2, 1, 1) : 432
// 0 0 0 1 1 1 2 2 3 3 : (2, 4, 4) : (2, 2, 0) : 432
// 0 0 0 1 1 1 2 2 2   : (3, 3, 3) : (3, 0, 0) : 216
// 0 0 0 1 1 1 2 2 2 3 : (3, 3, 4) : (3, 0, 1) : 648
